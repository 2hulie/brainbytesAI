name: CI/CD Pipeline

on:
  push:
    branches: [master, development]
  pull_request:
    branches: [master, development]

jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
      id-token: write
      issues: write

    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
      ### 1Ô∏è‚É£ CHECKOUT REPOSITORY ###
      - name: Checkout code
        uses: actions/checkout@v3

      ### 2Ô∏è‚É£ SETUP NODE.JS ###
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      ### 3Ô∏è‚É£ CACHE DEPENDENCIES ###
      - name: Cache frontend dependencies
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: frontend-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            frontend-${{ runner.os }}-
      - name: Cache backend dependencies
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: backend-${{ runner.os }}-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            backend-${{ runner.os }}-

      ### 4Ô∏è‚É£ INSTALL DEPENDENCIES ###
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci
      - name: Install backend dependencies
        working-directory: backend
        run: npm ci

      ### 5Ô∏è‚É£ SETUP DOCKER BUILDX ###
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      ### 6Ô∏è‚É£ DOCKER BUILDS WITH LAYER CACHING ###
      - name: Build and cache frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          tags: frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build and cache backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          tags: backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      ### 7Ô∏è‚É£ CODE QUALITY CHECKS ###
      - name: Run ESLint (frontend)
        working-directory: frontend
        run: npx eslint . || true
      - name: Run ESLint (backend)
        working-directory: backend
        run: npx eslint . || true
      - name: Run Prettier Check (frontend)
        working-directory: frontend
        run: npx prettier --check . --ignore-path ../../.prettierignore
      - name: Run Prettier Check (backend)
        working-directory: backend
        run: npx prettier --check . --ignore-path ../../.prettierignore
      - name: Check for vulnerable dependencies (frontend)
        working-directory: frontend
        run: npm audit --audit-level=moderate || true
      - name: Check for vulnerable dependencies (backend)
        working-directory: backend
        run: npm audit --audit-level=moderate || true

      ### 8Ô∏è‚É£ UNIT TESTING ###
      - name: Run backend unit tests with coverage
        working-directory: backend
        run: npm test -- --coverage
      - name: Upload backend coverage report
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage/

      ### 9Ô∏è‚É£ FRONTEND TESTING ###
      - name: Run frontend unit tests with coverage
        working-directory: frontend
        run: npm test -- --coverage
      - name: Upload frontend coverage report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage/

      ### üîü E2E TESTING WITH CYPRESS ###
      - name: Run frontend app in background
        working-directory: frontend
        run: npm run dev &
      - name: Wait for app to be ready
        run: npx wait-on http://localhost:3000
      - name: Run Cypress tests
        working-directory: frontend
        run: npm run cy:run

      ### 1Ô∏è‚É£1Ô∏è‚É£ TEST SUMMARY REPORT ###
      - name: Upload test summary report (backend)
        uses: actions/upload-artifact@v4
        with:
            name: backend-junit-report
            path: backend/reports/junit.xml

      - name: Upload test summary report (frontend)
        uses: actions/upload-artifact@v4
        with:
            name: frontend-junit-report
            path: frontend/reports/junit.xml

      ### 1Ô∏è‚É£2Ô∏è‚É£ CHECK FOR LARGE FILES ###
      - name: Check for large files
        run: git ls-files | xargs -I{} du -sh {} | sort -rh | head -n 10

      ### 1Ô∏è‚É£3Ô∏è‚É£ PERFORMANCE TESTING ###
      - name: Run Lighthouse performance tests
        working-directory: frontend
        run: npx lhci autorun || true

      ### 1Ô∏è‚É£4Ô∏è‚É£ ARTIFACTS ###
      - name: Upload frontend build artifact (placeholder)
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/
      - name: Upload backend build artifact (placeholder)
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend/build/

      ### 1Ô∏è‚É£5Ô∏è‚É£ DEPLOYMENT PLACEHOLDER ###
      - name: Deploy to test environment
        run: echo "Deploying to test environment (to be implemented)"

      ### 1Ô∏è‚É£6Ô∏è‚É£ STATUS NOTIFICATION ###
      # Commented out ‚Äî enable when ready to notify on failures
      # - name: Create GitHub issue on failure
      #   if: failure()
      #   uses: peter-evans/create-issue-from-file@v4
      #   with:
      #     title: "üö® CI/CD Pipeline Failure on Node.js ${{ matrix.node-version }}"
      #     content-filepath: .github/workflows/failure-report.md