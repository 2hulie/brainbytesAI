name: BrainBytes CI

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]
  workflow_dispatch:

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install root dependencies
        run: npm ci

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run frontend lint
        working-directory: ./frontend
        run: npm run lint

      - name: Run backend lint
        working-directory: ./backend
        run: npm run lint

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run tests with coverage
        working-directory: ./frontend
        run: npm test -- --coverage

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=15

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "backend/package-lock.json"

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Set up test .env
        working-directory: ./backend
        run: cp .env.test .env

      - name: Wait for MongoDB to be ready
        run: |
          for i in {1..30}; do
            nc -z mongo 27017 && echo "MongoDB is up" && exit 0
            echo "Waiting for MongoDB..."
            sleep 2
          done
          echo "MongoDB did not start in time" && exit 1

      - name: Run tests with coverage
        working-directory: ./backend
        run: npm test -- --coverage
        env:
          MONGODB_URI: mongodb://mongo:27017/brainbytes
          JWT_SECRET: testsecret
          GEMINI_API_KEY: dummy

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage
